{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\"; // The keyword 'firebase'(The first imported one) automatically configured with above two imports(firestore and auth)\n// update user collection in firebase using google signin\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // const collectionRef = firestore.collection('users');\n\n  const snapShot = await userRef.get(); // const collectionSnapshot = await collectionRef.get();\n  // console.log({collection:collectionSnapshot.docs.map(doc=>doc.data())});\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"Error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nconst config = {\n  apiKey: \"AIzaSyAnY4uFw5i8E0piJ5LvH1pZJarO48GPTSk\",\n  authDomain: \"crown-db-9717d.firebaseapp.com\",\n  databaseURL: \"https://crown-db-9717d.firebaseio.com\",\n  projectId: \"crown-db-9717d\",\n  storageBucket: \"crown-db-9717d.appspot.com\",\n  messagingSenderId: \"865331580792\",\n  appId: \"1:865331580792:web:02a079f9281ead6e74428d\",\n  measurementId: \"G-JQG7XHCBX2\"\n};\nfirebase.initializeApp(config);\nexport const addCollectionsAndDocuments = async (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc(); // we can get the document as empty string with unique id\n\n    batch.set(newDocRef, obj); // set the object\n  });\n  return await batch.commit(); // batch.commit() fire of our batch request. batch.commit() return a promise.\n  // when commits exeeds it will comback and resolve a void value meaning a null value\n};\n\nconst convertCollectionSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollection);\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/home/nidheesh/Music/react-udemy-course/crown-cloth-app/src/firebase/firebase.utlis.js"],"names":["firebase","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","addCollectionsAndDocuments","collectionKey","objectToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\n// The keyword 'firebase'(The first imported one) automatically configured with above two imports(firestore and auth)\n\n// update user collection in firebase using google signin\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  // const collectionRef = firestore.collection('users');\n\n  const snapShot = await userRef.get();\n  // const collectionSnapshot = await collectionRef.get();\n  // console.log({collection:collectionSnapshot.docs.map(doc=>doc.data())});\n  if (!snapShot.exists) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"Error creating user\", error.message);\n    }\n  }\n  return userRef;\n};\n\nconst config = {\n  apiKey: \"AIzaSyAnY4uFw5i8E0piJ5LvH1pZJarO48GPTSk\",\n  authDomain: \"crown-db-9717d.firebaseapp.com\",\n  databaseURL: \"https://crown-db-9717d.firebaseio.com\",\n  projectId: \"crown-db-9717d\",\n  storageBucket: \"crown-db-9717d.appspot.com\",\n  messagingSenderId: \"865331580792\",\n  appId: \"1:865331580792:web:02a079f9281ead6e74428d\",\n  measurementId: \"G-JQG7XHCBX2\"\n};\n\nfirebase.initializeApp(config);\n\nexport const addCollectionsAndDocuments = async (\n  collectionKey,\n  objectToAdd\n) => {\n  const collectionRef = firestore.collection(collectionKey);\n\n  const batch = firestore.batch();\n  objectToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    // we can get the document as empty string with unique id\n\n    batch.set(newDocRef, obj); // set the object\n  });\n\n  return await batch.commit();\n  // batch.commit() fire of our batch request. batch.commit() return a promise.\n  // when commits exeeds it will comback and resolve a void value meaning a null value\n};\n\nconst convertCollectionSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const { title, items } = doc.data();\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n\n  console.log(transformedCollection);\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: \"select_account\" });\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}